1. Overflow:
mid = (l+r)//2  (X)
left = 1, right = Integer.MAX_VALUE cause overflow:

Correct: mid = l + (r-l)//2

2. consistent interval
// recommend : end inclusive;  (95% case)

exception:
    public int searchInsert(int[] nums, int target) {
        int start = 0;
        int end = nums.length;

         while (start + 1 < end) {
            int mid = (start + end) / 2;

            // TODOï¼š Do some comparison thing
            if  (nums[mid] < target) {
                start = mid;
            } else {
                end = mid;
            }
         }
        //the solution is either l or r;
        if (nums[start] >= target) {
            return start;
        } else {
            return end;
        }
    }

3. Category: Return L or R
3.1 Target 3.2 Without target 3.3 (3.2) and Cross the boundary;

3.1 Target  return mid;

3.2 1)Without the target: the L return the right first around the boundary (not satisfy the condition),
                            R return the left first one around the boundary (or satisfy the condition);
    2)Sometimes even if we use the closed interval, we can only have two case to run;

3.3 If we need to compare with the nums[mid] and nums[mid+1];
    use the SECOND template that while (l + 1 < r) // open interval and two case;
    then the solution is either l or r;




